// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  email     String      @unique
  emailVerified DateTime?
  name      String
  surname   String
  password  String
  image     String?
  skills    String[]
  projects  ProjectMember[]
  projectInvites   ProjectInvite[]
}

model Profile {
  id    String   @id @default(cuid())
  userId  String  @unique
}

model Project {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  category  String?
  icon      String?
  color     String
  done      Boolean     @default(false)
  doneAt    DateTime?
  members   ProjectMember[]
  teams     Team[]
  issues    Issue[]
  invites   ProjectInvite[]
  
  kanban    Kanban?
}

model Kanban {
  projectId String    @id
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  boardId   String?
  board     Board?
  timetableId String?
  timetable TimeTable?
  backlogId   String?
  backlog   Backlog?
  tasks     Task[]
}

model Board {
  id          String   @id @default(cuid())   
  projectId   String   @unique
  Kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  name        String?
  taskColumns TaskColumn[] 
}

model TaskColumn {
  id        String  @id @default(cuid())  
  board     Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String  
  name      String  
  tasks     Task[]
  position  Int   

  @@unique([boardId, name], name: "Unique_ColumnInBoard_Project")     
}

enum Ranking {
  low
  medium
  heigh
}

model Task {
  id            String  @id @default(cuid()) 
  taskColumn    TaskColumn? @relation(fields: [taskColumnId], references: [id], onDelete: Cascade) 
  taskColumnId  String?
  projectId     String 
  kanban        Kanban @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  createAt      DateTime @default(now())
  name          String
  type          String
  priority      Ranking?
  estimatedHours Int?
  complexity    Ranking?
  description   String?
  issues        Issue[]
  tags          Tag[]
  projectMember  ProjectMember? @relation(fields: [projectMemberId], references: [id])
  projectMemberId String?
  tasksGroupId  String?
  tasksGroup    TasksGroup? @relation(fields: [tasksGroupId], references: [id])
  
}

model Tag {
  id      String  @id @default(cuid()) 
  taskId  String  
  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  name    String
  color   String
}

model Issue {
  id    String @id @default(cuid())
  taskId  String?
  task   Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  type   String
  description String
}

model IssueComments {
  id    String @id @default(cuid())
  issueId String
}

model ProjectInvite {
  id String @id @default(cuid())
  invitedUserId String
  invitedUser User @relation(fields: [invitedUserId], references: [id], onDelete: Cascade)
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createAt DateTime @default(now())
  displayed Boolean @default(false)

  @@unique([invitedUserId, projectId], name: "Unique_InvitedUser_Project")
}


model Backlog {
  id  String @id @default(cuid()) 
  projectId   String   @unique
  kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  tasksGroups TasksGroup[]
}

model TasksGroup {
  id String @id @default(cuid()) 
  backlogId String 
  backlog Backlog @relation(fields: [backlogId], references: [id], onDelete: Cascade)
  name  String
  tasks Task[]
  createAt DateTime @default(now())
  position Int

  @@unique([backlogId, name], name: "Unique_GroupsInBaclog_Project")
}



model ProjectMember {
  id        String    @id @default(cuid()) 
  userId    String   
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String  
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teamId    String?
  team      Team?      @relation(fields: [teamId], references: [id])
  seniority String?
  position  String?
  creator   Boolean   @default(false)
  isAdmin   Boolean   @default(false)
  tasks     Task[]

  @@unique([userId, projectId], name: "Unique_User_Project")
}

model Team {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade) 
  members   ProjectMember[]
}

//model TeamMember {
  //id      String      @id @default(cuid()) 
  //userId  String  
  //user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  //teamId  String  
  //team    Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  //creator   Boolean   @default(false)
  //position  String?

  //@@unique([userId, teamId], name: "Unique_User_Team")
//}

// TODO //////////////////
model ProjectPosition {
  id    String    @id @default(cuid()) 
  name  String
}

model TimeTable {
  id          String   @id @default(cuid()) 
  projectId   String   @unique
  kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
}


//////////////////////////


