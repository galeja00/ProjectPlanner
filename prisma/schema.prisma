// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// základni informace o uživateli aplikace
model User {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  email     String      @unique
  emailVerified DateTime?
  name      String
  surname   String
  password  String
  image     String?
  skills    String[]
  projects  ProjectMember[]
  projectInvites   ProjectInvite[]
  issues    Issue[]
  comments  IssueComments[]
}

// zakladní informace o projektu
model Project {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  category  String?
  icon      String?
  color     String
  done      Boolean     @default(false)
  doneAt    DateTime?
  members   ProjectMember[]
  teams     Team[]
  issues    Issue[]
  invites   ProjectInvite[]
  
  kanban    Kanban?
}

// informace o tabulich daneho projektu typu kanban(kvuli mozhnosti rozěíření na jiné typy projektového řízení)
model Kanban {
  projectId String    @id
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  boardId   String?
  board     Board?
  timetableId String?
  timetable TimeTable?
  backlogId   String?
  backlog   Backlog?
  tasks     Task[]
}

// informace o kanban tabuly
model Board {
  id          String   @id @default(cuid())   
  projectId   String   @unique
  Kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  name        String?
  taskColumns TaskColumn[] 
}

// sloupce dane kanban tabule
model TaskColumn {
  id        String  @id @default(cuid())  
  board     Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String  
  name      String  
  tasks     Task[]
  position  Int   
  @@unique([boardId, name], name: "Unique_ColumnInBoard_Project")     
}

enum Ranking {
  low
  medium
  high
}

// informace o ukolech v projektu
model Task {
  id            String  @id @default(cuid()) 
  taskColumn    TaskColumn? @relation(fields: [taskColumnId], references: [id], onDelete: Cascade) 
  taskColumnId  String?
  projectId     String 
  kanban        Kanban @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  createAt      DateTime @default(now())
  deadlineAt    DateTime?
  name          String
  type          String
  colIndex      Int?
  priority      Ranking?
  teamId        String?
  team          Team? @relation(fields: [teamId], references: [id])
  estimatedHours Int?
  complexity    Ranking?
  description   String?
  issues        Issue[]
  tags          Tag[]
  //projectMembers  ProjectMember? @relation(fields: [projectMemberId], references: [id])
  taskSolvers   TaskSolver[]
  //projectMemberId String?
  tasksGroupId  String?
  tasksGroup    TasksGroup? @relation(fields: [tasksGroupId], references: [id])
}

// project member který reší úkol
model TaskSolver {
  id      String @id @default(cuid())
  memberId  String
  member   ProjectMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  taskId  String
  task    Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
 
  @@unique([taskId, memberId], name: "Unique_task_member")
}

// system tagu (neimplementovan aktulně)
model Tag {
  id      String   @id @default(cuid()) 
  taskId  String?  
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  teamId  String?
  team    Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  name    String
  color   String
}

// problemy při řešení úkolů nebo jine
model Issue {
  id    String @id @default(cuid())
  taskId  String?
  task   Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  priority Ranking
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String 
  type   String
  description String
  commends IssueComments[]
}

// komentaře k dané issue
model IssueComments {
  id      String @id @default(cuid())
  issueId String
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  text    String
  authorId String
  author  User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// uchovava data pokud je uzivatel pozvan do projektu, pokud prijme nebo neprijme tak se tento invite smaze
model ProjectInvite {
  id String @id @default(cuid())
  invitedUserId String
  invitedUser User @relation(fields: [invitedUserId], references: [id], onDelete: Cascade)
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createAt DateTime @default(now())
  displayed Boolean @default(false)

  @@unique([invitedUserId, projectId], name: "Unique_InvitedUser_Project")
}

// tabule backlog
model Backlog {
  id          String @id @default(cuid()) 
  projectId   String   @unique
  kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  tasksGroups TasksGroup[]
}

// skupiny tasku ktere jsou v danem projektu
model TasksGroup {
  id String @id @default(cuid()) 
  backlogId String 
  backlog Backlog @relation(fields: [backlogId], references: [id], onDelete: Cascade)
  name  String
  tasks Task[]
  createAt DateTime @default(now())
  position Int

  @@unique([backlogId, name], name: "Unique_GroupsInBaclog_Project")
}


// 
model ProjectMember {
  id        String    @id @default(cuid()) 
  userId    String   
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String  
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teamId    String?
  team      Team?      @relation(fields: [teamId], references: [id])
  seniority String?
  position  String?
  creator   Boolean   @default(false) 
  isAdmin   Boolean   @default(false)
  tasks     TaskSolver[]

  @@unique([userId, projectId], name: "Unique_User_Project")
}
// add color to teams
model Team {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  color     String?
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade) 
  members   ProjectMember[]
  tasks     Task[]
  tags      Tag[]
}

//model TeamMember {
  //id      String      @id @default(cuid()) 
  //userId  String  
  //user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  //teamId  String  
  //team    Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  //creator   Boolean   @default(false)
  //position  String?

  //@@unique([userId, teamId], name: "Unique_User_Team")
//}

// TODO //////////////////
model ProjectPosition {
  id    String    @id @default(cuid()) 
  name  String
}

model TimeTable {
  id          String   @id @default(cuid()) 
  projectId   String   @unique
  kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
}


//////////////////////////


