// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  email     String      @unique
  emailVerified DateTime?
  name      String
  surname   String
  password  String
  image     String?
  projects  ProjectMember[]
  teams     TeamMember[]
}

model Profile {
  id    String   @id @default(cuid())
  userId  String  @unique
}

enum ProjectType {
  Kanban
  Scrum
}

model Project {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  category  String?
  icon      String?
  color     String
  done      Boolean     @default(false)
  type      ProjectType
  members   ProjectMember[]
  teams     Team[]
  
  kanban    Kanban?
  scrum     Scrum?
}

model Kanban {
  projectId String    @id
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  boardId   String?
  board     Board?
  timetableId String?
  timetable TimeTable?
  backlogId   String?
  backlog   Backlog?
}

model Board {
  id          String   @id @default(cuid())   
  projectId   String   @unique
  Kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  name        String?
  taskColumns TaskColumn[] 
}

model TaskColumn {
  id        String  @id @default(cuid())  
  board     Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String  
  name      String  @unique
  tasks     Task[]
  numOfTasks  Int   @default(0)
  position  Int        
}

model Task {
  id            String  @id @default(cuid()) 
  taskColumn    TaskColumn @relation(fields: [taskColumnId], references: [id], onDelete: Cascade) 
  taskColumnId  String
  createAt      DateTime @default(now())
  name          String
  type          String
  Tags          Tag[]
  projectMember  ProjectMember @relation(fields: [projectMemberId], references: [id])
  projectMemberId String
}

model Tag {
  id      String  @id @default(cuid()) 
  taskId  String  @unique
  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  name    String
  type    String?
  color   String?
}

// TODO ////////////////////////////////
model Scrum {
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String    @id
}
model TimeTable {
  id          String   @id @default(cuid()) 
  projectId   String   @unique
  kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
}

model Backlog {
  id  String @id @default(cuid()) 
  projectId   String   @unique
  kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
}
/////////////////////////////////////////


model ProjectMember {
  id        String    @id @default(cuid()) 
  userId    String   
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String  
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  position  String?
  creator   Boolean   @default(false)
  teamId    String?
  tasks     Task[]

   @@unique([userId, projectId], name: "Unique_User_Project")
}


model TeamMember {
  id      String      @id @default(cuid()) 
  userId  String  
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId  String  
  team    Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  creator   Boolean   @default(false)
  position  String?

  @@unique([userId, teamId], name: "Unique_User_Team")
}

// TODO //////////////////
model ProjectPosition {
  id    String    @id @default(cuid()) 
  name  String
}

//////////////////////////

model Team {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  icon      String?
  members   TeamMember[]
  project   Project[]
}
