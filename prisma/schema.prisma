// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// základni informace o uživateli aplikace
model User {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  email     String      @unique
  name      String
  surname   String
  password  String
  image     String?
  projects  ProjectMember[]
  projectInvites   ProjectInvite[]
  issues    Issue[]
  comments  IssueComments[]
  nodes     Node[]
}

model Node {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  text      String      @db.Text
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// zakladní informace o projektu
model Project {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  category  String?
  icon      String?
  color     String
  done      Boolean     @default(false)
  doneAt    DateTime?
  members   ProjectMember[]
  teams     Team[]
  issues    Issue[]
  invites   ProjectInvite[]
  
  kanban    Kanban?
}

// urcuje jestli dany uzivatel je v danem projektu
model ProjectMember {
  id        String    @id @default(cuid()) 
  userId    String   
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String  
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teamId    String?
  team      Team?     @relation(fields: [teamId], references: [id])
  creator   Boolean   @default(false) 
  isAdmin   Boolean   @default(false)
  tasks     TaskSolver[]

  @@unique([userId, projectId], name: "Unique_User_Project")
}

// uchovava data pokud je uzivatel pozvan do projektu, pokud prijme nebo neprijme tak se tento invite smaze

model ProjectInvite {
  id            String @id @default(cuid())
  invitedUserId String
  invitedUser   User @relation(fields: [invitedUserId], references: [id], onDelete: Cascade)
  projectId     String
  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createAt      DateTime @default(now())
  displayed     Boolean @default(false)

  @@unique([invitedUserId, projectId], name: "Unique_InvitedUser_Project")
}


// informace o tabulich daneho projektu typu kanban(kvuli mozhnosti rozěíření na jiné typy projektového řízení)
model Kanban {
  projectId     String    @id
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  boardId       String?
  board         Board?
  timetableId   String?
  timetable     TimeTable?
  backlogId     String?
  backlog       Backlog?
  tasks         Task[]
}

// informace o kanban tabuly
model Board {
  id          String   @id @default(cuid())   
  projectId   String   @unique
  Kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  taskColumns TaskColumn[] 
}

// tabule backlog
model Backlog {
  id          String  @id @default(cuid()) 
  projectId   String   @unique
  kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  tasksGroups TasksGroup[]
}

// casova tabule s ukoly
model TimeTable {
  id          String   @id @default(cuid()) 
  projectId   String   @unique
  kanban      Kanban   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  tasksGroups TasksGroup[]
}

// sloupce dane kanban tabule
model TaskColumn {
  id        String  @id @default(cuid())  
  board     Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String  
  name      String  
  tasks     Task[]
  position  Int   
  @@unique([boardId, name], name: "Unique_ColumnInBoard_Project")     
}

enum Ranking {
  low
  medium
  high
}

// informace o ukolech v projektu
model Task {
  id            String  @id @default(cuid())
  projectId     String 
  kanban        Kanban @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  createAt      DateTime @default(now())
  name          String
  type          String
  colIndex      Int?
  priority      Ranking?
  teamId        String?
  team          Team? @relation(fields: [teamId], references: [id])
  estimatedHours Int?
  complexity    Ranking?
  description   String?
  issues        Issue[]
  tags          Tag[]
  taskSolvers   TaskSolver[]
  tasksGroupId  String?
  tasksGroup    TasksGroup? @relation(fields: [tasksGroupId], references: [id])
  status        Boolean @default(false)
  taskColumnId  String?
  taskColumn    TaskColumn? @relation(fields: [taskColumnId], references: [id], onDelete: Cascade) 
  
}

// project member který reší úkol
model TaskSolver {
  id          String @id @default(cuid())
  memberId    String
  member      ProjectMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  taskId      String
  task        Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
 
  @@unique([taskId, memberId], name: "Unique_task_member")
}

// systém tagu pro týmy a úkoly
model Tag {
  id          String   @id @default(cuid()) 
  createdAt   DateTime @default(now())
  taskId      String?  
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  teamId      String?
  team        Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  name        String
  color       String
}

// problemy při řešení úkolů nebo jine
model Issue {
  id          String @id @default(cuid())
  createdAt   DateTime @default(now())
  taskId      String?
  task        Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  priority    Ranking
  creator     User @relation(fields: [creatorId], references: [id])
  creatorId   String 
  name        String
  description String @db.Text
  commends    IssueComments[]
}


// komentaře k dané issue
model IssueComments {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  issueId       String
  issue         Issue          @relation(fields: [issueId], references: [id], onDelete: Cascade)
  isFirst       Boolean
  text          String
  authorId      String
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  answers       IssueComments[] @relation("AnswersTo")
  prevCommentId String?
  prevComment   IssueComments? @relation("AnswersTo", fields: [prevCommentId], references: [id], onDelete: Cascade)
}



// skupiny tasku ktere jsou v danem projektu
model TasksGroup {
  id          String @id @default(cuid()) 
  backlogId   String 
  backlog     Backlog @relation(fields: [backlogId], references: [id], onDelete: Cascade)
  timeTableId String?
  timeTable   TimeTable? @relation(fields: [timeTableId], references: [id])
  name        String
  tasks       Task[]
  createAt    DateTime @default(now())
  position    Int
  startAt     DateTime?
  deadlineAt  DateTime?
  @@unique([backlogId, name], name: "Unique_GroupsInBaclog_Project")
}



// zakladni infomace o teamu
model Team {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  name      String
  color     String?
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade) 
  members   ProjectMember[]
  tasks     Task[]
  tags      Tag[]
}

